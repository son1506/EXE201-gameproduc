import { message } from "antd";
import getAllProducts from '../../modules/Products/getAllProducts'; // Adjust path as needed

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface Product {
  productId: string;
  productName: string;
  productDescription: string;
  productPrice: number;
  productQuantity: number;
  productImageUrl: string;
  createdAt: string;
  isActive: boolean;
  categoryId: string;
}

const API_URL = "https://openrouter.ai/api/v1/chat/completions";
const OPENROUTER_API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;

// Cache ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
let productsCache: Product[] | null = null;
let cacheTimestamp: number = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

// Mapping categoryId sang t√™n ti·∫øng Vi·ªát
const CATEGORY_NAMES: Record<string, string> = {
  'accessories': 'Ph·ª• ki·ªán',
  'collectibles': 'ƒê·ªì s∆∞u t·∫≠p',
  'apparel': 'Qu·∫ßn √°o',
};

// L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m v·ªõi cache
const getProductsData = async (): Promise<Product[]> => {
  const now = Date.now();
  
  if (productsCache && (now - cacheTimestamp) < CACHE_DURATION) {
    return productsCache;
  }
  
  try {
    const products = await getAllProducts();
    productsCache = products.filter((product: Product) => product.isActive);
    cacheTimestamp = now;
    return productsCache;
  } catch (error) {
    console.error('Error fetching products:', error);
    return productsCache || [];
  }
};

// ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
const formatPrice = (price: number): string => {
  if (price < 1000) {
    return `$${price}`;
  }
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(price);
};

// T·∫°o system prompt v·ªõi th√¥ng tin s·∫£n ph·∫©m
const createSystemPrompt = async (): Promise<string> => {
  try {
    const products = await getProductsData();
    
    if (products.length === 0) {
      return `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging. 
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.
Hi·ªán t·∫°i kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m, h√£y xin l·ªói v√† y√™u c·∫ßu kh√°ch h√†ng th·ª≠ l·∫°i sau.`;
    }

    // Nh√≥m s·∫£n ph·∫©m theo category
    const groupedProducts = products.reduce((groups: Record<string, Product[]>, product) => {
      const category = product.categoryId;
      if (!groups[category]) groups[category] = [];
      groups[category].push(product);
      return groups;
    }, {});

    let productInfo = `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging.
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.

DANH S√ÅCH S·∫¢N PH·∫®M HI·ªÜN T·∫†I:

`;

    Object.entries(groupedProducts).forEach(([categoryId, categoryProducts]) => {
      const categoryName = CATEGORY_NAMES[categoryId] || categoryId;
      productInfo += `${categoryName.toUpperCase()}:\n`;
      categoryProducts.forEach(product => {
        productInfo += `- ${product.productName}: ${formatPrice(product.productPrice)} (C√≤n ${product.productQuantity} s·∫£n ph·∫©m)\n  M√¥ t·∫£: ${product.productDescription}\n`;
      });
      productInfo += '\n';
    });

    productInfo += `
H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Lu√¥n th√¢n thi·ªán v√† nhi·ªát t√¨nh
- Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m, s·ª≠ d·ª•ng th√¥ng tin ch√≠nh x√°c t·ª´ danh s√°ch tr√™n
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Khi kh√°ch h·ªèi gi√°, hi·ªÉn th·ªã gi√° ch√≠nh x√°c
- N·∫øu h·ªèi v·ªÅ t·ªìn kho, cho bi·∫øt s·ªë l∆∞·ª£ng c√≤n l·∫°i
- C√≥ th·ªÉ g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± n·∫øu kh√°ch quan t√¢m
- N·∫øu kh√°ch h·ªèi v·ªÅ game Sweeties Dodging, gi·∫£i th√≠ch ƒë√¢y l√† game arcade vui nh·ªôn v·ªõi c√°c nh√¢n v·∫≠t k·∫πo ng·ªçt`;

    return productInfo;
  } catch (error) {
    console.error('Error creating system prompt:', error);
    return `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging. 
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.
Hi·ªán t·∫°i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t, h√£y xin l·ªói kh√°ch h√†ng v√† y√™u c·∫ßu th·ª≠ l·∫°i sau.`;
  }
};

export async function callchat(chatMessages: Message[]): Promise<string> {
  try {
    // Ki·ªÉm tra API key
    if (!OPENROUTER_API_KEY) {
      throw new Error("API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Ki·ªÉm tra file .env");
    }

    if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
      throw new Error("Kh√¥ng c√≥ tin nh·∫Øn n√†o ƒë·ªÉ g·ª≠i.");
    }

    console.log("üîç G·ª≠i request v·ªõi messages:", chatMessages);

    // T·∫°o system prompt v·ªõi th√¥ng tin s·∫£n ph·∫©m
    const systemPrompt = await createSystemPrompt();

    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
        "X-Title": "Sweeties AI Chat",
        "HTTP-Referer": window.location.origin,
      },
      body: JSON.stringify({
        model: "openai/gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          ...chatMessages,
        ],
        max_tokens: 1000,
        temperature: 0.7,
      }),
    });

    console.log("üì° Response status:", response.status);
    
    const data = await response.json();
    console.log("üìù Response data:", data);

    if (!response.ok) {
      console.error("‚ùå API Error:", data);
      throw new Error(data.error?.message || `HTTP ${response.status}: ${data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`);
    }

    if (!data.choices || !data.choices[0]?.message?.content) {
      throw new Error("Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ chatbot.");
    }

    return data.choices[0].message.content;
  } catch (err: unknown) {
    console.error("üö® Chatbot Error:", err);
    
    const errorMessage = err instanceof Error ? err.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
    
    // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
    if (errorMessage.includes("401")) {
      message.error("API key kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra l·∫°i c·∫•u h√¨nh.");
    } else if (errorMessage.includes("429")) {
      message.error("Qu√° nhi·ªÅu request. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } else if (errorMessage.includes("Network")) {
      message.error("L·ªói k·∫øt n·ªëi m·∫°ng. Ki·ªÉm tra internet.");
    } else {
      message.error(errorMessage || "C√≥ l·ªói x·∫£y ra khi g·ªçi chatbot.");
    }
    
    throw err;
  }
}