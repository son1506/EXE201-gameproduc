import { message } from "antd";
import getAllProducts from '../../modules/Products/getAllProducts';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface Product {
  productId: string;
  productName: string;
  productDescription: string;
  productPrice: number;
  productQuantity: number;
  productImageUrl: string;
  createdAt: string;
  isActive: boolean;
  categoryId: string;
}

// C·∫•u h√¨nh Google Gemini API
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// Cache ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c
let productsCache: Product[] | null = null;
let cacheTimestamp: number = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

// Mapping categoryId sang t√™n ti·∫øng Vi·ªát
const CATEGORY_NAMES: Record<string, string> = {
  'accessories': 'Ph·ª• ki·ªán',
  'collectibles': 'ƒê·ªì s∆∞u t·∫≠p',
  'apparel': 'Qu·∫ßn √°o',
};

// L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m v·ªõi cache
const getProductsData = async (): Promise<Product[]> => {
  const now = Date.now();

  if (productsCache && (now - cacheTimestamp) < CACHE_DURATION) {
    return productsCache;
  }

  try {
    const products = await getAllProducts();
    productsCache = products.filter((product: Product) => product.isActive);
    cacheTimestamp = now;
    return productsCache;
  } catch (error) {
    console.error('Error fetching products:', error);
    return productsCache || [];
  }
};

// ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
const formatPrice = (price: number): string => {
  if (price < 1000) {
    return `$${price}`;
  }
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(price);
};

// T·∫°o system prompt v·ªõi th√¥ng tin s·∫£n ph·∫©m
const createSystemPrompt = async (): Promise<string> => {
  try {
    const products = await getProductsData();

    if (products.length === 0) {
      return `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging. 
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.
Hi·ªán t·∫°i kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m, h√£y xin l·ªói v√† y√™u c·∫ßu kh√°ch h√†ng th·ª≠ l·∫°i sau.`;
    }

    // Nh√≥m s·∫£n ph·∫©m theo category
    const groupedProducts = products.reduce((groups: Record<string, Product[]>, product) => {
      const category = product.categoryId;
      if (!groups[category]) groups[category] = [];
      groups[category].push(product);
      return groups;
    }, {});

    let productInfo = `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging.
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.

DANH S√ÅCH S·∫¢N PH·∫®M HI·ªÜN T·∫†I:

`;

    Object.entries(groupedProducts).forEach(([categoryId, categoryProducts]) => {
      const categoryName = CATEGORY_NAMES[categoryId] || categoryId;
      productInfo += `${categoryName.toUpperCase()}:\n`;
      categoryProducts.forEach(product => {
        productInfo += `- ${product.productName}: ${formatPrice(product.productPrice)} (C√≤n ${product.productQuantity} s·∫£n ph·∫©m)\n  M√¥ t·∫£: ${product.productDescription}\n`;
      });
      productInfo += '\n';
    });

    productInfo += `
H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Lu√¥n th√¢n thi·ªán v√† nhi·ªát t√¨nh
- Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m, s·ª≠ d·ª•ng th√¥ng tin ch√≠nh x√°c t·ª´ danh s√°ch tr√™n
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- Khi kh√°ch h·ªèi gi√°, hi·ªÉn th·ªã gi√° ch√≠nh x√°c
- N·∫øu h·ªèi v·ªÅ t·ªìn kho, cho bi·∫øt s·ªë l∆∞·ª£ng c√≤n l·∫°i
- C√≥ th·ªÉ g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª± n·∫øu kh√°ch quan t√¢m
- N·∫øu kh√°ch h·ªèi v·ªÅ game Sweeties Dodging, gi·∫£i th√≠ch ƒë√¢y l√† game arcade vui nh·ªôn v·ªõi c√°c nh√¢n v·∫≠t k·∫πo ng·ªçt`;

    return productInfo;
  } catch (error) {
    console.error('Error creating system prompt:', error);
    return `B·∫°n l√† Sweeties AI - tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng Sweeties Dodging. 
B·∫°n b√°n merchandise ch√≠nh th·ª©c c·ªßa game Sweeties Dodging.
Hi·ªán t·∫°i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t, h√£y xin l·ªói kh√°ch h√†ng v√† y√™u c·∫ßu th·ª≠ l·∫°i sau.`;
  }
};

// T·∫°o conversation history cho Gemini
const buildConversationText = (messages: Message[], systemPrompt: string): string => {
  let conversationText = `${systemPrompt}\n\n--- CU·ªòC TR√í CHUY·ªÜN ---\n\n`;
  
  messages.forEach((msg, index) => {
    if (msg.role === 'user') {
      conversationText += `Kh√°ch h√†ng: ${msg.content}\n\n`;
    } else {
      conversationText += `Sweeties AI: ${msg.content}\n\n`;
    }
  });
  
  conversationText += `Sweeties AI: `;
  return conversationText;
};

export async function callchat(chatMessages: Message[]): Promise<string> {
  try {
    // Ki·ªÉm tra API key
    if (!GEMINI_API_KEY) {
      throw new Error("Google Gemini API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Ki·ªÉm tra file .env");
    }

    if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
      throw new Error("Kh√¥ng c√≥ tin nh·∫Øn n√†o ƒë·ªÉ g·ª≠i.");
    }

    console.log("üîç G·ª≠i request t·ªõi Google Gemini v·ªõi messages:", chatMessages);

    // T·∫°o system prompt v·ªõi th√¥ng tin s·∫£n ph·∫©m
    const systemPrompt = await createSystemPrompt();
    
    // L·∫•y tin nh·∫Øn cu·ªëi c√πng c·ªßa user
    const lastUserMessage = chatMessages[chatMessages.length - 1];
    
    // T·∫°o prompt cho Gemini
    const fullPrompt = buildConversationText(chatMessages, systemPrompt);

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: fullPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1000,
          stopSequences: ["Kh√°ch h√†ng:", "User:"]
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    console.log("üì° Gemini Response status:", response.status);

    const data = await response.json();
    console.log("üìù Gemini Response data:", data);

    if (!response.ok) {
      console.error("‚ùå Gemini API Error:", data);
      throw new Error(data.error?.message || `Gemini API Error: ${response.status}`);
    }

    // X·ª≠ l√Ω response t·ª´ Gemini
    const candidates = data.candidates;
    if (!candidates || candidates.length === 0) {
      throw new Error("Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini.");
    }

    const candidate = candidates[0];
    
    // Ki·ªÉm tra n·∫øu b·ªã block b·ªüi safety filter
    if (candidate.finishReason === "SAFETY") {
      return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. Vui l√≤ng h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c d·ªãch v·ª• c·ªßa ch√∫ng t√¥i! üòä";
    }

    const content = candidate.content?.parts?.[0]?.text;
    if (!content) {
      throw new Error("Kh√¥ng c√≥ n·ªôi dung ph·∫£n h·ªìi t·ª´ Gemini.");
    }

    // L√†m s·∫°ch response (lo·∫°i b·ªè c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt)
    let cleanResponse = content.trim();
    
    // Lo·∫°i b·ªè c√°c ph·∫ßn prompt c√≥ th·ªÉ b·ªã l·∫∑p l·∫°i
    cleanResponse = cleanResponse.replace(/^Sweeties AI:\s*/i, '');
    cleanResponse = cleanResponse.replace(/Kh√°ch h√†ng:.*$/i, '');
    
    console.log("‚úÖ Gemini Response:", cleanResponse);
    return cleanResponse;

  } catch (err: unknown) {
    console.error("üö® Gemini Chatbot Error:", err);

    const errorMessage = err instanceof Error ? err.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh";

    // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn c·ªßa Gemini API
    if (errorMessage.includes("401") || errorMessage.includes("403")) {
      message.error("üîë Google Gemini API key kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra l·∫°i c·∫•u h√¨nh.");
    } else if (errorMessage.includes("429")) {
      message.error("üö´ V∆∞·ª£t qu√° gi·ªõi h·∫°n request Gemini. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.");
    } else if (errorMessage.includes("quota")) {
      message.error("üìà ƒê√£ v∆∞·ª£t qu√° quota Gemini. Ch·ªù reset ho·∫∑c n√¢ng c·∫•p t√†i kho·∫£n.");
    } else if (errorMessage.includes("SAFETY")) {
      message.error("üõ°Ô∏è N·ªôi dung b·ªã ch·∫∑n b·ªüi safety filter. Th·ª≠ c√¢u h·ªèi kh√°c.");
    } else if (errorMessage.includes("RECITATION")) {
      message.error("üìù Gemini t·ª´ ch·ªëi ph·∫£n h·ªìi do policy. Th·ª≠ di·ªÖn ƒë·∫°t kh√°c.");
    } else if (errorMessage.includes("Network") || errorMessage.includes("fetch")) {
      message.error("üåê L·ªói k·∫øt n·ªëi m·∫°ng. Ki·ªÉm tra internet.");
    } else {
      message.error(`‚ùå L·ªói Gemini: ${errorMessage}`);
    }

    throw err;
  }
}